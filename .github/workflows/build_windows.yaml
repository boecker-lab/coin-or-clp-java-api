name: build_CLP_win64


on:
  workflow_dispatch:
env:
  CBC_VERSION: 2.10.12

jobs:
  build:
    runs-on: windows-2019
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: winfix

      - name: setup msys2
        uses: msys2/setup-msys2@v2
        with:
          update: true
          install: >-
            base-devel
            mingw-w64-x86_64-toolchain
            mingw-w64-x86_64-cmake
            mingw-w64-x86_64-gcc-libgfortran
            git
            zip

      - name: Cache coin-or dependencies
        id: cache-coinor
        uses: actions/cache@v3
        with:
          path:  api/extern/coinor/win64/dist
          key: ${{ runner.os }}-${{ runner.arch }}-coinor-cbc-${{ env.CBC_VERSION }}

      - name: build coinor
        shell: msys2 {0}
        working-directory: api/extern/coinor
        if: steps.cache-coinor.outputs.cache-hit != 'true'
        run: |
          export ADD_FFLAGS=-fallow-argument-mismatch
          ./coinbrew build install Cbc@releases/$CBC_VERSION --parallel-jobs $(nproc) --tests none --prefix win64/dist

      - name: build CLPWrapper
        shell: msys2 {0}
        working-directory: api
        run: |
          mkdir build
          cd build
          cmake -G "MSYS Makefiles" -DTARGET_ARCH=64 ..
          cmake --build . --target install

      - name: CLPTest
        working-directory: api/build/test
        shell: msys2 {0}
        run: ./CLPTest

      - name: copy dependencies
        working-directory: api/build/native/w64
        shell: msys2 {0}
        run: |
          ldd CLPModelWrapper_JNI.dll
          cp -v /mingw64/bin/libgfortran-5.dll /mingw64/bin/libgcc_s_seh-1.dll /mingw64/bin/libbz2-1.dll /mingw64/bin/libstdc++-6.dll /mingw64/bin/libgmp-10.dll /mingw64/bin/zlib1.dll /mingw64/bin/libquadmath-0.dll /mingw64/bin/libwinpthread-1.dll .

      - name: checkout cbc-java repository to create PR
        uses: actions/checkout@v4
        with:
          repository: boecker-lab/cbc-java
          path: cbc-java

      - name: move binaries to the right location
        run: |
          cp api/build/native/w64/* cbc-java/cbc-java-native-win-x86-64/src/main/resources/win-x86-64

      - name: set build version
        id: setversion
        continue-on-error: true
        working-directory: cbc-java
        run: |
          versionline_prev=$(sed -n '/^ *version/ p' build.gradle)
          cbcversion_prev=$(echo $versionline_prev | sed -E 's/.*([0-9]+\.[0-9]+\.[0-9]+)\..*/\1/')
          buildnumber=$(echo $versionline_prev | sed -E 's/.*\.([0-9]+).*/\1/')
          # increase build number if CBC version is unchanged, otherwise reset it
          if [[ "$CBC_VERSION" == "$cbcversion_prev" ]]; then
            ((buildnumber++))
          else
            buildnumber=1
          fi
          # change version
          sed -i -E "s/(^ *version ')[^']+('.*)/\1$CBC_VERSION.$buildnumber\2/" build.gradle

      - name: create PR
        uses: peter-evans/create-pull-request@v3
        with:
          token: ${{ secrets.CBC_JAVA_UPDATE_TOKEN }}
          title: "CLPWrapper update ${{ runner.os }} ${{ runner.arch }}, CBC version ${{ env.CBC_VERSION }}"
          body: "${{ steps.setversion.outcome == 'failure' && 'The build number in build.gradle has to be set manually!' || 'The build number has been automatically increased.' }}"
          branch: "update_${{ runner.os }}_${{ runner.arch }}_clpwrapper_cbc${{ env.CBC_VERSION}}"
          commit-message: "[create-pull-request] ${{ runner.os }} ${{ runner.arch }}: update CLPWrapper and/or dependencies"
          base: main
          path: cbc-java


      # - name: upload
      #   working-directory: api/build/native/
      #   shell: msys2 {0}
      #   run: |
      #     zipfile=clp_cbc-2.10.12.zip
      #     url=https://bio.informatik.uni-jena.de/repository/dist-release-local/de/unijena/bioinf/clp/
      #     if [[ $(curl -Is $url/$zipfile | head -n 1 | grep -c 'OK') -eq 1 ]]; then
      #       curl $url/$zipfile -o $zipfile
      #       zip $zipfile -d 'clp/w64/*' || true # delete old binaries
      #     fi
      #     mkdir clp
      #     cp -r w64 clp/
      #     zip $zipfile clp/w64/* # insert new ones
      #     curl --user '${{ secrets.ARTIFACTORY_USERNAME }}:${{ secrets.ARTIFACTORY_TOKEN }}' -X PUT $url -T $zipfile
